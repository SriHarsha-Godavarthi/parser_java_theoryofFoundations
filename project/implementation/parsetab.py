
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'programleftLOGICAL_EETLOGICAL_NELOGICAL_LELESSER_THENLOGICAL_GEGREATER_THENleftPLUSMINUSleftMULTIPLEDIVIDErightNOTASSIGNMENT BOOLEAN CHAR CLASS COMMA COMMENT DEFAULT DIVIDE DO DOT DOUBLE ELSE EMPTY FINAL FLOAT FOR GREATER_THEN IDENTIFIER IF IMPORT INT LBK LBRA LESSER_THEN LOGICAL_AND LOGICAL_EET LOGICAL_GE LOGICAL_LE LOGICAL_NE LOGICAL_OR LPAR MAIN MINUS MULTIPLE NOT NUMBER PACKAGE PLUS PRINTFUNC PRIVATE PROTECTED PUBLIC RBK RBRA RETURN RPAR SEMI_COLON STATIC STRING_LITRAL SUPER SWITCH THIS VOID WHILEprogram : class_declarationclass_declaration : CLASS IDENTIFIER LBRA class_body RBRAclass_body : method_declaration\n                    | field_declaration\n                    | emptymethod_declaration : type IDENTIFIER LPAR parameter_list RPAR LBRA statement RBRAstatement : while_statement\n                    | if_statement\n                    | assignment_statement\n                    | method_call_statement\n                    | blockblock : LBRA statement RBRAwhile_statement : WHILE LPAR expression RPAR statementif_statement : IF LPAR expression RPAR statement else_statementelse_statement : ELSE statement\n                        | emptyassignment_statement : IDENTIFIER ASSIGNMENT expression SEMI_COLONmethod_call_statement : IDENTIFIER LPAR argument_list RPAR SEMI_COLONexpression : expression operator expression\n                    | LPAR expression RPAR\n                    | IDENTIFIER\n                    | NUMBER\n                    | STRING_LITRALargument_list : expression\n                        | expression COMMA argument_list\n                        | emptyreturn_statement : RETURN expression SEMI_COLON\n                            | RETURN SEMI_COLONfield_declaration : type IDENTIFIER SEMI_COLONparameter_list : type IDENTIFIER\n                        | type IDENTIFIER COMMA parameter_list\n                        | emptytype : INT\n                | CHAR\n                | BOOLEAN\n                | VOID\n                | FLOAT\n                | DOUBLE\n                | IDENTIFIERoperator : PLUS\n                    | MINUS\n                    | MULTIPLE\n                    | DIVIDE\n                    | LOGICAL_LE\n                    | LOGICAL_GE\n                    | LOGICAL_EET\n                    | LOGICAL_NE\n                    | LESSER_THEN\n                    | GREATER_THEN\n                    | LOGICAL_AND\n                    | LOGICAL_ORempty :'
    
_lr_action_items = {'CLASS':([0,],[3,]),'$end':([1,2,18,],[0,-1,-2,]),'IDENTIFIER':([3,5,6,11,12,13,14,15,16,17,20,22,27,28,31,40,41,44,45,48,58,59,60,61,62,63,64,65,66,67,68,69,70,73,74,75,83,],[4,6,-39,19,-33,-34,-35,-36,-37,-38,6,25,6,30,30,46,46,46,46,46,46,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,46,30,30,30,]),'LBRA':([4,26,28,31,74,75,83,],[5,28,31,31,31,31,31,]),'RBRA':([5,7,8,9,10,21,32,33,34,35,36,37,42,43,54,57,78,80,81,82,84,85,],[-52,18,-3,-4,-5,-29,43,-7,-8,-9,-10,-11,54,-6,-12,-17,-18,-13,-52,-14,-16,-15,]),'INT':([5,20,27,],[12,12,12,]),'CHAR':([5,20,27,],[13,13,13,]),'BOOLEAN':([5,20,27,],[14,14,14,]),'VOID':([5,20,27,],[15,15,15,]),'FLOAT':([5,20,27,],[16,16,16,]),'DOUBLE':([5,20,27,],[17,17,17,]),'LPAR':([19,30,38,39,40,41,44,45,48,58,59,60,61,62,63,64,65,66,67,68,69,70,73,],[20,41,44,45,48,48,48,48,48,48,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,48,]),'SEMI_COLON':([19,46,47,49,50,72,76,77,],[21,-21,57,-22,-23,78,-19,-20,]),'RPAR':([20,23,24,25,27,29,41,46,49,50,51,52,53,55,56,71,73,76,77,79,],[-52,26,-32,-30,-52,-31,-52,-21,-22,-23,72,-24,-26,74,75,77,-52,-19,-20,-25,]),'COMMA':([25,46,49,50,52,76,77,],[27,-21,-22,-23,73,-19,-20,]),'WHILE':([28,31,74,75,83,],[38,38,38,38,38,]),'IF':([28,31,74,75,83,],[39,39,39,39,39,]),'ASSIGNMENT':([30,],[40,]),'ELSE':([33,34,35,36,37,54,57,78,80,81,82,84,85,],[-7,-8,-9,-10,-11,-12,-17,-18,-13,83,-14,-16,-15,]),'NUMBER':([40,41,44,45,48,58,59,60,61,62,63,64,65,66,67,68,69,70,73,],[49,49,49,49,49,49,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,49,]),'STRING_LITRAL':([40,41,44,45,48,58,59,60,61,62,63,64,65,66,67,68,69,70,73,],[50,50,50,50,50,50,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,50,]),'PLUS':([46,47,49,50,52,55,56,71,76,77,],[-21,59,-22,-23,59,59,59,59,59,-20,]),'MINUS':([46,47,49,50,52,55,56,71,76,77,],[-21,60,-22,-23,60,60,60,60,60,-20,]),'MULTIPLE':([46,47,49,50,52,55,56,71,76,77,],[-21,61,-22,-23,61,61,61,61,61,-20,]),'DIVIDE':([46,47,49,50,52,55,56,71,76,77,],[-21,62,-22,-23,62,62,62,62,62,-20,]),'LOGICAL_LE':([46,47,49,50,52,55,56,71,76,77,],[-21,63,-22,-23,63,63,63,63,63,-20,]),'LOGICAL_GE':([46,47,49,50,52,55,56,71,76,77,],[-21,64,-22,-23,64,64,64,64,64,-20,]),'LOGICAL_EET':([46,47,49,50,52,55,56,71,76,77,],[-21,65,-22,-23,65,65,65,65,65,-20,]),'LOGICAL_NE':([46,47,49,50,52,55,56,71,76,77,],[-21,66,-22,-23,66,66,66,66,66,-20,]),'LESSER_THEN':([46,47,49,50,52,55,56,71,76,77,],[-21,67,-22,-23,67,67,67,67,67,-20,]),'GREATER_THEN':([46,47,49,50,52,55,56,71,76,77,],[-21,68,-22,-23,68,68,68,68,68,-20,]),'LOGICAL_AND':([46,47,49,50,52,55,56,71,76,77,],[-21,69,-22,-23,69,69,69,69,69,-20,]),'LOGICAL_OR':([46,47,49,50,52,55,56,71,76,77,],[-21,70,-22,-23,70,70,70,70,70,-20,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'class_declaration':([0,],[2,]),'class_body':([5,],[7,]),'method_declaration':([5,],[8,]),'field_declaration':([5,],[9,]),'empty':([5,20,27,41,73,81,],[10,24,24,53,53,84,]),'type':([5,20,27,],[11,22,22,]),'parameter_list':([20,27,],[23,29,]),'statement':([28,31,74,75,83,],[32,42,80,81,85,]),'while_statement':([28,31,74,75,83,],[33,33,33,33,33,]),'if_statement':([28,31,74,75,83,],[34,34,34,34,34,]),'assignment_statement':([28,31,74,75,83,],[35,35,35,35,35,]),'method_call_statement':([28,31,74,75,83,],[36,36,36,36,36,]),'block':([28,31,74,75,83,],[37,37,37,37,37,]),'expression':([40,41,44,45,48,58,73,],[47,52,55,56,71,76,52,]),'argument_list':([41,73,],[51,79,]),'operator':([47,52,55,56,71,76,],[58,58,58,58,58,58,]),'else_statement':([81,],[82,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> class_declaration','program',1,'p_program','java_parser.py',33),
  ('class_declaration -> CLASS IDENTIFIER LBRA class_body RBRA','class_declaration',5,'p_class_declaration','java_parser.py',37),
  ('class_body -> method_declaration','class_body',1,'p_class_body','java_parser.py',41),
  ('class_body -> field_declaration','class_body',1,'p_class_body','java_parser.py',42),
  ('class_body -> empty','class_body',1,'p_class_body','java_parser.py',43),
  ('method_declaration -> type IDENTIFIER LPAR parameter_list RPAR LBRA statement RBRA','method_declaration',8,'p_method_declaration','java_parser.py',47),
  ('statement -> while_statement','statement',1,'p_statement','java_parser.py',51),
  ('statement -> if_statement','statement',1,'p_statement','java_parser.py',52),
  ('statement -> assignment_statement','statement',1,'p_statement','java_parser.py',53),
  ('statement -> method_call_statement','statement',1,'p_statement','java_parser.py',54),
  ('statement -> block','statement',1,'p_statement','java_parser.py',55),
  ('block -> LBRA statement RBRA','block',3,'p_block','java_parser.py',59),
  ('while_statement -> WHILE LPAR expression RPAR statement','while_statement',5,'p_while_statement','java_parser.py',63),
  ('if_statement -> IF LPAR expression RPAR statement else_statement','if_statement',6,'p_if_statement','java_parser.py',67),
  ('else_statement -> ELSE statement','else_statement',2,'p_else_statement','java_parser.py',71),
  ('else_statement -> empty','else_statement',1,'p_else_statement','java_parser.py',72),
  ('assignment_statement -> IDENTIFIER ASSIGNMENT expression SEMI_COLON','assignment_statement',4,'p_assignment_statement','java_parser.py',79),
  ('method_call_statement -> IDENTIFIER LPAR argument_list RPAR SEMI_COLON','method_call_statement',5,'p_method_call_statement','java_parser.py',83),
  ('expression -> expression operator expression','expression',3,'p_expression','java_parser.py',88),
  ('expression -> LPAR expression RPAR','expression',3,'p_expression','java_parser.py',89),
  ('expression -> IDENTIFIER','expression',1,'p_expression','java_parser.py',90),
  ('expression -> NUMBER','expression',1,'p_expression','java_parser.py',91),
  ('expression -> STRING_LITRAL','expression',1,'p_expression','java_parser.py',92),
  ('argument_list -> expression','argument_list',1,'p_argument_list','java_parser.py',102),
  ('argument_list -> expression COMMA argument_list','argument_list',3,'p_argument_list','java_parser.py',103),
  ('argument_list -> empty','argument_list',1,'p_argument_list','java_parser.py',104),
  ('return_statement -> RETURN expression SEMI_COLON','return_statement',3,'p_return_statement','java_parser.py',112),
  ('return_statement -> RETURN SEMI_COLON','return_statement',2,'p_return_statement','java_parser.py',113),
  ('field_declaration -> type IDENTIFIER SEMI_COLON','field_declaration',3,'p_field_declaration','java_parser.py',120),
  ('parameter_list -> type IDENTIFIER','parameter_list',2,'p_parameter_list','java_parser.py',124),
  ('parameter_list -> type IDENTIFIER COMMA parameter_list','parameter_list',4,'p_parameter_list','java_parser.py',125),
  ('parameter_list -> empty','parameter_list',1,'p_parameter_list','java_parser.py',126),
  ('type -> INT','type',1,'p_type','java_parser.py',135),
  ('type -> CHAR','type',1,'p_type','java_parser.py',136),
  ('type -> BOOLEAN','type',1,'p_type','java_parser.py',137),
  ('type -> VOID','type',1,'p_type','java_parser.py',138),
  ('type -> FLOAT','type',1,'p_type','java_parser.py',139),
  ('type -> DOUBLE','type',1,'p_type','java_parser.py',140),
  ('type -> IDENTIFIER','type',1,'p_type','java_parser.py',141),
  ('operator -> PLUS','operator',1,'p_operator','java_parser.py',144),
  ('operator -> MINUS','operator',1,'p_operator','java_parser.py',145),
  ('operator -> MULTIPLE','operator',1,'p_operator','java_parser.py',146),
  ('operator -> DIVIDE','operator',1,'p_operator','java_parser.py',147),
  ('operator -> LOGICAL_LE','operator',1,'p_operator','java_parser.py',148),
  ('operator -> LOGICAL_GE','operator',1,'p_operator','java_parser.py',149),
  ('operator -> LOGICAL_EET','operator',1,'p_operator','java_parser.py',150),
  ('operator -> LOGICAL_NE','operator',1,'p_operator','java_parser.py',151),
  ('operator -> LESSER_THEN','operator',1,'p_operator','java_parser.py',152),
  ('operator -> GREATER_THEN','operator',1,'p_operator','java_parser.py',153),
  ('operator -> LOGICAL_AND','operator',1,'p_operator','java_parser.py',154),
  ('operator -> LOGICAL_OR','operator',1,'p_operator','java_parser.py',155),
  ('empty -> <empty>','empty',0,'p_empty','java_parser.py',171),
]
